using System;

namespace LoopsMethodsExceptionsArraysClasses
{
    class Program
    {
// Add a static method named MultiplytTwoNumbers that takes two int
        // parameters named x and y, and returns the int result that is the
        // product of the two parameters.
        static int MultiplyTwoNumbers (int x, int y)
        {
            return x * y;
        }


// Add an instance method named AddTwoNumbers that takes two int
        // parameters named x and y, and returns the int result that is
        // the sum of the two parameters.
        int AddTwoNumbers (int x, int y)
        {
            return x + y;
        }


// Add a static method named DoubleIt that returns void, and it
        // takes one parameter named x of type int that will be returned
        // as an out parameter. The outgoing value of the parameter is double
        // the input value of the parameter.
        static void DoubleIt (int x, out int value)
        {
            value = x * 2;
        }


// Add an instance method named LoopOverParams that returns void, and
        // takes a single parameter that is an array of int type elements
        // declared using the params keyword. The LoopOverParams method uses a
        // foreach loop to iterate over the collection of values it receives
        // and it displays the list of elements in the parameter.
        void LoopOverParams (params int[] elements)
        {
                                
                foreach (int element in elements)
            {
               Console.WriteLine(element);
            }
}

// Add a static method named DivideIntegers that takes two int
        // parameters named dividend and divisor. It returns the result
        // of dividing the dividend parameter by the divisor parameter.
static int DivideIntegers(int dividend, int divisor)
        {
            return dividend / divisor;
        }

static void Main(string[] args)
        {
            // Call the static method named MultiplytTwoNumbers
            // passing in the two int values of 3 and 4. Then
            // assign the result to a local variable named product and
            // display the resulting value of product in console output.
            int x = 3;
            int y = 4;
            int product = MultiplyTwoNumbers(x, y);
            Console.WriteLine(product);

// Create an instance of the Program class named program.
            // Then call the instance method named AddTwoNumbers
            // passing in the values of 3 and 4. Then assign
            // the result to a local variable named sum and
            // display the value of sum in console output
            Program program = new Program();
            int sum = program.AddTwoNumbers(x, y);
            Console.WriteLine(sum);

// Declare an int variable named x and initialize it
            // with the literal value of 42. Call the static method
            // named DoubleIt passing in the x variable as the
            // parameter. Then display the resulting value of x in
            // console output.
            int value;
            DoubleIt(42, out value);
            Console.WriteLine(value);

// Call the LoopOverParams instance method, passing in
            // three parameters with the values of 1, 2, and 3.
            program.LoopOverParams(1, 2, 3);


// Call the method named DivideIntegers with the first
            // parameter set to 1, and second parameter set to 0.
            // Assign the result to an int variable named quotient.
            // Apply the try and catch keywords to properly handle
            // the resulting divide by zero exception. In the
            // exception handler, display the exception message
            // in the console output.
            int dividend = 1, divisor = 0;
            int quotient;

            try
            {
                quotient = DivideIntegers(dividend, divisor);
                Console.WriteLine(quotient);
            }
            catch (DivideByZeroException e)
            {
                Console.WriteLine(e.Message);
            }


 // Declare a two-dimensional array named multiplicationTable
            // that contains 4 elements by 4 elements. Initialize it in
            // a nested loop to contain elements that equal to the value
            // that is the product of the two index values for
            // each element. In a second nested loop, display the values
            // in the console output, with column elements seperated with
            // commas, and row elements seperated with carriage returns.
            int[,] multiplicationTable = new int[4, 4];  //[Rows(i), Columns(j)]
                for (int i = 0; i < multiplicationTable.GetLength(0); i++)  //Where i < 4 run the i for loop, increment i by 1
                    {
                        for (int j = 0; j < multiplicationTable.GetLength(1); j++)  //Where j < 4 run the j for loop, increment j by 1
                            {
                                multiplicationTable[i, j] = i * j;  //For every iteration of the j loop, multiply current value of i by current value of j
                                int d = multiplicationTable[i, j];  //Initiate d as current value of i & j
                    if (j < multiplicationTable.GetLength(1) - 1)   //If j < 3 ...
                                        {
                                            Console.Write(d + ",");                 //....write d,  (for columns 0, 1, 2) ...
                                        }
                                    else
                                        {
                                            Console.Write(d);                       //....else write d (for column 3).
                                        }
                            }
                        Console.Write("\n");   //Carriage return to next row i, then re-evaluate i & j (back to line 120) 
                    }

            Console.ReadLine();
        }
    }
}
